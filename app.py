# Importing required modules
from flask import Flask, request, render_template, redirect, url_for, send_from_directory, jsonify
from flask_restx import Api, Resource, fields
import os
import requests
from werkzeug.utils import secure_filename
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS  # Include CORS Requests
from datetime import datetime, timedelta

# Import the database instance
from db_instance import db

# Immigration Checkpoint Workflow Logic
from immigration_logic import immigration_walkthrough

from models import UserSensitiveInformation, Vehicle, UserVehicle, Preset, PresetTraveller, Pass, PassTraveller, UserTraveller

# Import mock_data function
from mock_data import insert_mock_data

# Initializing Flask App
app = Flask(__name__)
CORS(app)  # Enable CORS for React Native requests

# Initialize Flask-RESTx API
api = Api(app, version="1.0", title="Immigration API", description="A simple API for managing immigration workflows")

# Configuration
UPLOAD_FOLDER = 'uploads'  # Directory where uploaded images will be saved
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER  # Use Upload_Folder for file uploads
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///immigration.db'  # SQLite Database URI for local testing
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
TOKEN = "210ed0449ee06e8d9bcee4a67c742814e4e7366e"  # This is the PlateRecognizer API Token
API_URL = "https://api.platerecognizer.com/v1/plate-reader/"  # This is the PlateRecognizer API Url

# Ensure the upload directory exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Initialize SQLAlchemy for the Flask app
db.init_app(app)

# -------- Create API Namespaces --------
ns_user = api.namespace('users', description='User-related operations')
ns_vehicle = api.namespace('vehicles', description='Vehicle-related operations')
ns_preset = api.namespace('presets', description='Preset-related operations')
ns_pass = api.namespace('passes', description='Pass management')

# -------- Swagger Models --------
add_vehicle_model = api.model('AddVehicle', {
    'vehicle_number': fields.String(required=True, description="License plate number of the vehicle"),
    'user_vehicle_model': fields.String(required=True, description="Model of the vehicle user has entered")
})

add_vehicle_model_result = api.model('AddVehicleResult', {
    'user_vehicle': fields.Nested(api.model('UserVehicle', {
        'user_id': fields.Integer(readonly=True),
        'vehicle_id': fields.Integer(readonly=True),
        'vehicle_number': fields.String(required=True, description="Vehicle's license plate number"),
        'user_vehicle_model': fields.String(required=True, description="Model of the vehicle user has entered")
    }))
})

all_vehicles_model = api.model('AllUserVehicles', {
    'user_vehicle_id': fields.Integer(readonly=True),
    'user_vehicle_name': fields.String(required=True, description="Model name user has assigned to the vehicle"),
    'vehicle_id': fields.Integer(readonly=True),
    'vehicle_number': fields.String(required=True, description="Vehicle's license plate number")
})

preset_details_model = api.model('PresetDetailsWithUserId', {
    'user_id': fields.Integer(readonly=True, example=1, description="First name of the user"),
    'presets': fields.Nested(api.model('PresetDetails', {
        'preset_id': fields.Integer(readonly=True),
        'preset_name': fields.String(required=True, description="The name of the preset"),
        'passenger_count': fields.Integer(required=True, description="The number of passengers in the preset")
    }))
})

traveller_model_with_user_id = api.model('User', {
    'user_id': fields.Integer(required=True, example=1, description="Autogenerated id of the user"),
    'first_name': fields.String(required=True, example="Alice", description="First name of the user"),
    'middle_name': fields.String(example="J", description="Middle name of the user"),
    'last_name': fields.String(required=True, example="Smith", description="Last name of the user"),
    'passport_number': fields.String(required=True, example="A12345678", description="The passport number of the user")
})

traveller_model = api.model('Traveller', {
    'first_name': fields.String(required=True, description="First name of the traveller"),
    'middle_name': fields.String(description="Middle name of the traveller"),
    'last_name': fields.String(required=True, description="Last name of the traveller"),
    'passport_number': fields.String(required=True, description="Passport number of the traveller")
})

user_travellers_model = api.model('UserTravellers', {
    'creator_user_id': fields.Integer(required=True, example=1, description="The ID of the user who created the traveller records"),
    'travellers': fields.List(fields.Nested(traveller_model_with_user_id), 
                              example=[{
                                  "user_id": 1,
                                  "first_name": "Alice",
                                  "middle_name": "J",
                                  "last_name": "Smith",
                                  "passport_number": "A12345678"
                              }],
                              description="A list of travellers added by the user")
})

preset_with_users_model = api.model('PresetWithUsers', {
    'preset_id': fields.Integer(readonly=True),
    'preset_name': fields.String(required=True, description="Name of the preset"),
    'users': fields.List(fields.Nested(traveller_model_with_user_id))
})

preset_with_users_model_2 = api.model('PresetWithUsers2', {
    # 'preset_id': fields.Integer(required=True, description="ID of the user creating the preset"),
    'preset_name': fields.String(required=True, description="Name of the preset"),
    'user_id': fields.Integer(required=True, example=1, description="Autogenerated id of the user"),
    'travellers': fields.List(fields.Nested(traveller_model), description="List of travellers to be added to the preset")
})

retrieve_all_presets_for_user_model = api.model('AllPresetForUser', {
    'user_id': fields.Integer(required=True, example=1, description="Autogenerated id of the user"),
    'presets_created': fields.List(fields.Nested(preset_with_users_model))
})

preset_response_model = api.model('PresetResponse', {
    'preset_id': fields.Integer(readonly=True),
    'preset_name': fields.String(required=True, description="Name of the preset"),
    'created_by_user_id': fields.Integer(description="ID of the user who created the preset"),
    'travellers_added': fields.List(fields.Nested(traveller_model_with_user_id), description="List of travellers added to the preset")
})

pass_response_model = api.model('PassResponseWithUserId', {
    'user_id': fields.Integer(required=True, example=1, description="Autogenerated id of the user"),
    "passes": fields.Nested(api.model('PassResponse', {
        'pass_id': fields.Integer(readonly=True),
        'pass_date': fields.String(required=True, description="Date when the pass was created (in String, NOT Datetime)"),
        'expiry_datetime': fields.String(required=True, description="Expiry date of the pass (in String, NOT Datetime)"),
        'pass_utilized': fields.Boolean(required=True, description="Whether the pass has been utilized for immigration"),
        'travellers': fields.List(fields.Nested(traveller_model_with_user_id), description="List of travellers associated with the pass")
    }))
})

create_pass_model = api.model('CreatePass', {
    #'vehicle_number': fields.String(required=True, description="Vehicle number for the pass"),
    'creator_user_id': fields.Integer(required=True, description="User ID of the creator of the pass"),
    'pass_date': fields.String(required=True, description="Date and time of the pass creation (format: YYYY-MM-DD HH:MM:SS)"),
    'pass_utilized': fields.Boolean(required=True, description="Whether the pass is utilized or not"),
    'traveller_passport_numbers': fields.List(fields.String, required = True, description="List of traveller passport numbers")
})

pass_response_model_2 = api.model('PassResponse2', {
    'pass_id': fields.Integer(readonly=True),
    'creator_user_id': fields.Integer(required=True, description="User ID of the creator of the pass"),
    'pass_date': fields.DateTime(required=True, description="Date and time of the pass creation"),
    'expiry_datetime': fields.DateTime(required=True, description="Expiry date and time of the pass"),
    'pass_utilized': fields.Boolean(required=True, description="Whether the pass has been utilized"),
    'travellers_added': fields.List(fields.Nested(traveller_model_with_user_id), description="List of travellers added to the pass")
})

pass_history_model = api.model('PassHistoryWithUserId', {
    'user_id': fields.Integer(required=True, example=1, description="Autogenerated id of the user"),
    "passes_utilized": fields.List(fields.Nested(api.model('PassHistory', {
        'pass_id': fields.Integer(readonly=True),
        'pass_date': fields.DateTime(required=True, description="Date when the pass was created"),
        'expiry_datetime': fields.DateTime(required=True, description="Expiry date and time of the pass")
    })))
})

first_name_model = api.model('FirstName', {
    'first_name': fields.String(
        required=True, 
        description="The first name of the user",
        example="John"  # Example value for the first name
    )
})

middle_name_model = api.model('MiddleName', {
    'middle_name': fields.String(
        required=True, 
        description="The middle name of the user",
        example="David"  # Example value for the middle name
    )
})

last_name_model = api.model('LastName', {
    'last_name': fields.String(
        required=True, 
        description="The last name of the user",
        example="Doe"  # Example value for the last name
    )
})

dob_model = api.model('DateOfBirth', {
    'date_of_birth': fields.String(
        required=True, 
        description="The date of birth of the user in YYYY-MM-DD format", 
        example="1990-01-01"  # Example value for the date of birth
    )
})

nationality_model = api.model('Nationality', {
    'nationality': fields.String(
        required=True, 
        description="The nationality or passport issuing country of the user",
        example="American"  # Example value for nationality
    )
})

passport_expiry_model = api.model('PassportExpiry', {
    'passport_expiry': fields.String(
        required=True, 
        description="The passport expiry date in YYYY-MM-DD format",
        example="2030-12-31"  # Example value for passport expiry
    )
})

passport_number_model = api.model('PassportNumber', {
    'passport_number': fields.String(
        required=True, 
        description="The passport number of the user",
        example="A12345678"  # Example value for the passport number
    )
})

user_profile_model = api.model('UserProfile', {
    'first_name': fields.String(
        description="The first name of the user", 
        example="John"  # Example value for first name
    ),
    'middle_name': fields.String(
        description="The middle name of the user", 
        example="David"  # Example value for middle name
    ),
    'last_name': fields.String(
        description="The last name of the user", 
        example="Doe"  # Example value for last name
    ),
    'date_of_birth': fields.String(
        description="The date of birth of the user in YYYY-MM-DD format", 
        example="1990-01-01"  # Example value for date of birth
    ),
    'nationality': fields.String(
        description="The nationality or passport issuing country of the user", 
        example="American"  # Example value for nationality
    ),
    'passport_expiry': fields.String(
        description="The passport expiry date in YYYY-MM-DD format", 
        example="2030-12-31"  # Example value for passport expiry
    ),
    'passport_number': fields.String(
        description="The passport number of the user", 
        example="A12345678"  # Example value for passport number
    )
})

# Define the success response model for 200 response
success_message_model = api.model('FieldUpdateSuccess', {
    'message': fields.String(
        required=True, 
        description="Field showing successful update of particular field", 
        example="The field you are trying to modify has been updated"
    )
})

# Define the error response model for 400 Error
error_response_model_400 = api.model('ErrorResponse400', {
    'error_code': fields.Integer(example = 400, description="Error code indicating the type of error"),
    'message': fields.String(example="Required fields missing or data already in database", description="Error message explaining the issue")
})

# Define the error response model for 404 Error
error_response_model_404 = api.model('ErrorResponse404', {
    'error_code': fields.Integer(example = 404, description="Error code indicating the type of error"),
    'message': fields.String(example="Particular resource not found", description="Error message explaining the issue")
})


# -------- Plate Recognizer code --------

# Defines the route for Homepage (consisting of Image Upload)
@app.route('/', methods=['GET', 'POST'])
def upload_file():
    
    # POST Method is called
    if request.method == 'POST':

        # If no file uploaded, reload current page
        if 'file' not in request.files:
            return redirect(request.url)
        
        file = request.files['file']
        
        # If the filename is empty, reload current page 
        if file.filename == '':
            return redirect(request.url)
        
        # If file was correctly uploaded so far
        if file:

            # Sanitize the filename
            filename = secure_filename(file.filename)

            # Save uploaded file to specific path/folder
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            
            # Process the image using PlateRecognizer API
            license_plate = recognize_license_plate(file_path, TOKEN)

            if "Error" in license_plate or license_plate == "No license plate detected.":
                return render_template('upload.html', filename=filename, license_plate=license_plate)
            
            # Start the database logic process
            immigration_result = immigration_walkthrough(license_plate)
            
            return render_template('upload.html', filename=filename, license_plate=license_plate, immigration_result=immigration_result)

    
    # GET Method is called
    else:
        return render_template('upload.html')

# Function to recognize license plate using PlateRecognizer API
def recognize_license_plate(image_path, token):

    # Create headers dictionary for authentication
    headers = {
        "Authorization": f"Token {token}"
    }

    with open(image_path, "rb") as fp:

        # Send request to Plate Recognizer
        response = requests.post(API_URL, headers=headers, files={"upload": fp})
        
        # If request was successful
        if response.status_code == 200 or response.status_code == 201:
            
            data = response.json()
            if data['results']:
                
                # Extract license plate from the response
                return data['results'][0]['plate']
            
            else:
                return "No license plate detected."
        
        else:
            return f"Error: {response.status_code}, {response.text}"

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    # return redirect(url_for('static', filename='uploads/' + filename), code=301)

    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# -------- Connection with Vehicular Guidance System code --------

# Define the route for Mask of Vehicular Guidance System
@app.route('/vehicular-guidance-system', methods=['GET', 'POST'])
def vehicular_guidance_system():
    
    # POST Method is called
    if request.method == 'POST':

        # If no file uploaded, reload current page
        if 'file' not in request.files:
            return redirect(request.url)
        
        file = request.files['file']
        
        # If the filename is empty, reload current page 
        if file.filename == '':
            return redirect(request.url)
        
        # If file was correctly uploaded so far
        if file:

            # Sanitize the filename
            filename = secure_filename(file.filename)

            # Save uploaded file to specific path/folder
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            
            # Process the image using PlateRecognizer API
            #TODO - Need to change the PlateRecognizer API and include Make, Model and Color to be returned and validation for that
            license_plate = recognize_license_plate(file_path, TOKEN)
            make = "make"
            model = "model"
            color = "color"
            error_messages = [] # List of error messages to be stored for license plate, make, model and color

            # The vehicular data in json format
            vehicular_data = {
                "license_plate": None,
                "make": None,
                "model": None,
                "color": None
            }

            # --- LICENSE PLATE ---
            if "Error" in license_plate or license_plate == "No license plate detected.":
                error_messages.append("No license plate detected")
                vehicular_data["license_plate"] = None
            else:
                vehicular_data["license_plate"] = license_plate

            # --- MAKE ---
            if "Error" in make or make == "No make detected.":
                error_messages.append("No make detected")
                vehicular_data["make"] = None
            else:
                vehicular_data["make"] = make

            # --- MODEL ---
            if "Error" in model or model == "No model detected.":
                error_messages.append("No model detected")
                vehicular_data["model"] = None
            else:
                vehicular_data["model"] = model

            # --- COLOR ---
            if "Error" in color or color == "No color detected.":
                error_messages.append("No color detected")
                vehicular_data["color"] = None
            else:
                vehicular_data["color"] = color


            # Determine overall status
            if error_messages:
                status = "failed"
                message = " | ".join(error_messages)  # Join all errors into one string
            else:
                status = "success"
                message = "All fields recognized successfully"

            vehicular_guidance_system_result = {
                "status": status,
                "message": message,
                **vehicular_data  # unpacking the vehicular data dictionary with recognized data
            }

            return render_template(
                'vehicular_guidance_system.html',
                filename = filename,
                vehicular_guidance_system_result = vehicular_guidance_system_result
            )
    
    # GET Method is called
    else:
        return render_template('vehicular_guidance_system.html')


# -------- Mobile App code --------


# Endpoint for adding vehicle to user
@ns_vehicle.route('/<int:user_id>/add-vehicle')
class UserVehicleResource(Resource):
    """Add a vehicle to a user."""

    @api.expect(add_vehicle_model)
    @api.response(200, 'Vehicle added successfully', add_vehicle_model_result)
    @api.response(400, 'Missing vehicle number or user vehicle model', error_response_model_400)
    @api.response(404, 'User or vehicle not found', error_response_model_404)
    def post(self, user_id):
        """Add a vehicle to the user"""

        # 1. Check if user exists
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        # 2. Parse JSON from request
        data = request.get_json()
        vehicle_number = data.get('vehicle_number')
        user_vehicle_model = data.get('user_vehicle_model')  # Name user has assigned to the vehicle aka Vehicle model

        # If vehicle number or user vehicle model is missing, return error
        if not vehicle_number:
            return {"error_code": 400, "message": "Missing vehicle_number"}, 400
        if not user_vehicle_model:
            return {"error_code": 400, "message": "Missing user_vehicle_model"}, 400

        # 3. Check if the vehicle (by plate number) already exists
        vehicle = Vehicle.query.filter_by(vehicle_number=vehicle_number).first()
        if not vehicle:
            # Create a new vehicle record if none found
            vehicle = Vehicle(vehicle_number=vehicle_number)
            db.session.add(vehicle)
            db.session.commit()

        # 4. Create a new UserVehicle link
        user_vehicle = UserVehicle(
            user_id=user_id,
            vehicle_id=vehicle.vehicle_id,
            user_vehicle_model=user_vehicle_model
        )

        db.session.add(user_vehicle)
        db.session.commit()

        # Prepare response data
        response = {
            "user_vehicle": {
                "user_id": user_id,
                "vehicle_id": vehicle.vehicle_id,
                "vehicle_number": vehicle.vehicle_number,
                "user_vehicle_model": user_vehicle_model
            }
        }

        # Marshal and return the response
        return api.marshal(response, add_vehicle_model_result), 200

@ns_vehicle.route('/<int:user_id>/get-all-vehicles')
class UserVehiclesResource(Resource):
    """Get all vehicles associated with a user."""

    @api.response(200, 'Success', all_vehicles_model)  # Document the 200 response with the expected model
    @api.response(404, 'User not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, user_id):
        """Retrieve all vehicles linked to a user."""

        # 1. Make sure the user exists
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        # 2. Join UserVehicle and Vehicle to retrieve user-vehicle pairs
        user_vehicles = (
            db.session.query(UserVehicle, Vehicle)
            .join(Vehicle, UserVehicle.vehicle_id == Vehicle.vehicle_id)
            .filter(UserVehicle.user_id == user_id)
            .all()
        )
        
        # 3. Build a list of dicts with the info we need
        vehicles_list = []
        for uv, v in user_vehicles:
            vehicles_list.append({
                'user_vehicle_id': uv.user_vehicle_id,
                'user_vehicle_name': uv.user_vehicle_model,  # user_vehicle_model in original code maps to user_vehicle_name
                'vehicle_id': v.vehicle_id,
                'vehicle_number': v.vehicle_number
            })

        return api.marshal(vehicles_list, all_vehicles_model), 200

@ns_preset.route('/<int:preset_id>/get-users')
class PresetUsersResource(Resource):
    """Get all users for a given preset."""

    @api.response(200, 'Success', preset_with_users_model)  # Document the 200 response with the expected model
    @api.response(404, 'Preset not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, preset_id):
        """Retrieve all users and their details associated with a particular preset id."""

        # 1. Check if the preset exists
        preset = Preset.query.get(preset_id)
        if not preset:
            return {"error_code": 404, "message": "Preset not found"}, 404

        # 2. Join User, PresetTraveller, and UserSensitiveInformation to get the users for the preset
        users = (
            db.session.query(
                UserSensitiveInformation.user_id, 
                UserSensitiveInformation.first_name, 
                UserSensitiveInformation.middle_name,
                UserSensitiveInformation.last_name,
                UserSensitiveInformation.passport_number
            )
            .join(PresetTraveller, UserSensitiveInformation.user_id == PresetTraveller.user_id)  # Join PresetTraveller to link presets and users
            .filter(PresetTraveller.preset_id == preset_id)
            .all()
        )

        # 3. Convert to a list of user dictionaries
        users_list = [
            {"user_id": u.user_id, "first_name": u.first_name, "middle_name": u.middle_name, "last_name": u.last_name, "passport_number": u.passport_number}
            for u in users
        ]

        # 4. Return response with preset information and the list of users
        response = {
            "preset_id": preset.preset_id,
            "preset_name": preset.preset_name,
            "users": users_list
        }

        return api.marshal(response, preset_with_users_model), 200


@ns_preset.route('/<int:user_id>/preset-summary')
class UserPresetsResource(Resource):
    """Get all the preset names and passenger count for a user."""
    
    @api.response(200, 'Success', preset_details_model)  # Document the 200 response with the expected model
    @api.response(404, 'Preset not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, user_id):
        """Retrieve all preset names and passenger count for a user."""

        # 1. Check if user exists
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error": "User not found"}, 404

        # 2. Fetch presets for the given user_id
        presets = Preset.query.filter_by(user_id=user_id).all()

        # 3. Build the preset list with passenger count
        presets_list = []
        for p in presets:
            # Count number of passengers in the preset
            passenger_count = db.session.query(PresetTraveller).filter_by(preset_id=p.preset_id).count()
            
            presets_list.append({
                "preset_id": p.preset_id,
                "preset_name": p.preset_name,
                "passenger_count": passenger_count
            })

        response = {
            "user_id": user_id,
            "presets": presets_list
        }

        # 4. Return the response with both user_id and presets_list
        return api.marshal(response, preset_details_model), 200


@ns_preset.route('/<int:preset_id>/get-users')
class PresetUsersResource(Resource):
    """Get all users for a given preset - Not using this endpoint actively now"""

    @api.response(200, 'Success', preset_with_users_model)  # Document the 200 response with the expected model
    @api.response(404, 'Preset not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, preset_id):
        """Retrieve all users and their details associated with a particular preset id."""

        # 1. Check if the preset exists
        preset = Preset.query.get(preset_id)
        if not preset:
            return {"error": "Preset not found"}, 404

        # 2. Join User, PresetTraveller, and UserSensitiveInformation to get the users for the preset
        users = (
            db.session.query(
                UserSensitiveInformation.user_id, 
                UserSensitiveInformation.first_name, 
                UserSensitiveInformation.middle_name,
                UserSensitiveInformation.last_name,
                UserSensitiveInformation.passport_number
            )
            .join(PresetTraveller, UserSensitiveInformation.user_id == PresetTraveller.user_id)  # Join PresetTraveller to link presets and users
            .filter(PresetTraveller.preset_id == preset_id)
            .all()
        )

        # 3. Convert to a list of user dictionaries
        users_list = [
            {"user_id": u.user_id, "first_name": u.first_name, "middle_name": u.middle_name, "last_name": u.last_name, "passport_number": u.passport_number}
            for u in users
        ]

        response = {
            "preset_id": preset.preset_id,
            "preset_name": preset.preset_name,
            "users": users_list
        }

        # 4. Return response with preset information and the list of users
        return api.marshal(response, preset_with_users_model), 200

@ns_preset.route('/<int:user_id>/created-presets-with-users')
class UserCreatedPresetsWithUsersResource(Resource):
    """Get presets created by a user, along with the associated users."""

    @api.response(200, 'Success', retrieve_all_presets_for_user_model)  # Document the 200 response with the expected model
    @api.response(404, 'Preset not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, user_id):
        """Retrieve all presets created by specific user id, along with associated users and their details for each preset."""

        # 1. Check if the user exists
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error": "User not found"}, 404

        # 2. Fetch presets created by the user
        presets = (
            db.session.query(Preset.preset_id, Preset.preset_name)
            .filter(Preset.user_id == user_id)
            .all()
        )

        # If user hasn't created any presets, return empty list
        if not presets:
            return {"user_id": user_id, "presets_created": []}, 200

        presets_data = []
        for preset_id, preset_name in presets:
            # Fetch all users associated with the preset
            preset_users = (
                db.session.query(
                    UserSensitiveInformation.user_id,
                    UserSensitiveInformation.first_name,
                    UserSensitiveInformation.middle_name,
                    UserSensitiveInformation.last_name,
                    UserSensitiveInformation.passport_number
                )
                .join(PresetTraveller, UserSensitiveInformation.user_id == PresetTraveller.user_id)
                .filter(PresetTraveller.preset_id == preset_id)
                .all()
            )

            # Convert users into a list of dictionaries
            users_list = [
                {
                    "user_id": u.user_id,
                    "first_name": u.first_name,
                    "middle_name": u.middle_name,
                    "last_name": u.last_name,
                    "passport_number": u.passport_number
                }
                for u in preset_users
            ]

            presets_data.append({
                "preset_id": preset_id,
                "preset_name": preset_name,
                "users": users_list
            })

        response = {
            "user_id": user_id,
            "presets_created": presets_data
        }
        
        # Return response with user presets and associated users
        return api.marshal(response, retrieve_all_presets_for_user_model), 200  

@ns_preset.route('/create')
class CreatePresetResource(Resource):
    """Create a new preset with associated travellers."""

    @api.expect(preset_with_users_model_2)
    @api.response(200, 'Success', preset_response_model)  # Document the 200 response with the expected model
    @api.response(400, 'Preset name or User ID not given in input', error_response_model_400)
    @api.response(404, 'Creator User ID/Passport number of one of the travellers not found', error_response_model_404)  # Document the 404 response with error model
    def post(self):
        """Create a preset and add travellers to it."""

        # Extract data from request body
        data = request.get_json()

        preset_name = data.get("preset_name")
        user_id = data.get("user_id")
        travellers = data.get("travellers", [])

        # Validate required fields
        if not preset_name:
            return {"error": "Preset name is required"}, 400
        if not user_id:
            return {"error": "User ID is required"}, 400

        # Check if the user creating the preset exists
        creator = UserSensitiveInformation.query.get(user_id)
        if not creator:
            return {"error": f"User with user ID {user_id} not found"}, 404

        # Create the new preset
        new_preset = Preset(preset_name=preset_name, user_id=user_id)
        db.session.add(new_preset)
        db.session.commit()  # Commit to generate preset_id

        preset_id = new_preset.preset_id  # Retrieve the new preset_id

        # List to store successfully added travellers
        travellers_added = []

        # Process each traveller
        for traveller in travellers:
            passport_number = traveller.get("passport_number")
            given_first_name = traveller.get("first_name")
            given_middle_name = traveller.get("middle_name")
            given_last_name = traveller.get("last_name")

            # Find user_id from passport_number
            user_sensitive = UserSensitiveInformation.query.filter_by(passport_number=passport_number).first()
            if not user_sensitive:
                return {"error": f"Traveller with passport number {passport_number} not found"}, 404

            traveller_user_id = user_sensitive.user_id

            # Add traveller to PresetTraveller table
            preset_traveller = PresetTraveller(preset_id=preset_id, user_id=traveller_user_id)
            db.session.add(preset_traveller)

            # Append to response list, keeping the given names from request
            travellers_added.append({
                "user_id": traveller_user_id,
                "first_name": given_first_name,
                "middle_name": given_middle_name,
                "last_name": given_last_name,
                "passport_number": passport_number
            })

        db.session.commit()  # Commit all travellers

        response = {
            "preset_id": preset_id,
            "preset_name": preset_name,
            "created_by_user_id": user_id,
            "travellers_added": travellers_added
        }

        # Return response
        return api.marshal(response, preset_response_model), 200


@ns_pass.route('/<int:user_id>/passes')
class UserPassesResource(Resource):
    """Get all passes created by a specific user id, along with associated travellers and their details"""
    
    @api.response(200, 'Success', pass_response_model)  # Document the 200 response with the expected model
    @api.response(404, 'User ID not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, user_id):
        """Retrieve all passes and associated travellers for the user."""

        # 1. Check if the user exists
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error": "User not found"}, 404

        # 2. Fetch all passes created by the user
        passes = (
            db.session.query(
                Pass.pass_id,
                Pass.pass_date,
                Pass.expiry_datetime,
                Pass.pass_utilized
            )
            .filter(Pass.creator_user_id == user_id)
            .all()
        )

        passes_list = []
        for p in passes:
            # Fetch all travellers for the given pass
            travellers = (
                db.session.query(
                    UserSensitiveInformation.user_id,
                    UserSensitiveInformation.first_name,
                    UserSensitiveInformation.middle_name,
                    UserSensitiveInformation.last_name,
                    UserSensitiveInformation.passport_number
                )
                .join(PassTraveller, UserSensitiveInformation.user_id == PassTraveller.user_id)
                .filter(PassTraveller.pass_id == p.pass_id)
                .all()
            )

            # Convert traveller data to a list of dictionaries
            travellers_list = [
                {
                    "user_id": t.user_id,
                    "first_name": t.first_name,
                    "middle_name": t.middle_name,
                    "last_name": t.last_name,
                    "passport_number": t.passport_number
                }
                for t in travellers
            ]

            passes_list.append({
                "pass_id": p.pass_id,
                "expiry_datetime": p.expiry_datetime.strftime("%Y-%m-%d %H:%M:%S"),
                "pass_date": p.pass_date.strftime("%Y-%m-%d %H:%M:%S"),
                "pass_utilized": p.pass_utilized,
                "travellers": travellers_list
            })

        response = {
            "user_id": user_id,
            "passes": passes_list
        }

        # Return response with user passes
        return api.marshal(response, pass_response_model), 200


@ns_pass.route('/create')
class CreatePassResource(Resource):
    """Create a new pass and add travellers to it."""

    @api.expect(create_pass_model)
    @api.response(200, 'Success', pass_response_model_2)  # Document the 200 response with the expected model
    @api.response(400, 'Missing required fields like Pass user id and pass date or invalid date format ', error_response_model_400) 
    @api.response(404, 'Resource not found', error_response_model_404)  # Document the 404 response with error model
    def post(self):
        """Create a pass and add travellers to it."""

        # Extract data from request body
        data = request.get_json()

        # vehicle_number = data.get("vehicle_number")
        creator_user_id = data.get("creator_user_id")
        pass_date = data.get("pass_date")
        pass_utilized = data.get("pass_utilized", False)
        traveller_passport_numbers = data.get("traveller_passport_numbers", [])

        # Validate required fields
        if not all([creator_user_id, pass_date]):
            return {"error": "Missing required fields - Pass user id and pass date"}, 400

        # Convert datetime strings to proper formats
        try:
            pass_date = datetime.strptime(pass_date, "%Y-%m-%d %H:%M:%S").date()
            expiry_datetime = pass_date + timedelta(hours=24)  # Add 24 hours to the pass_date
    
        except ValueError:
            return {"error": "Invalid date format"}, 400

        # Check if the vehicle exists
        # vehicle = Vehicle.query.filter_by(vehicle_number=vehicle_number).first()
        # if not vehicle:
        #     return {"error": f"Vehicle with number {vehicle_number} not found"}, 404

        # Create new pass
        new_pass = Pass(
            creator_user_id=creator_user_id,
            expiry_datetime=expiry_datetime,
            pass_date=pass_date,
            pass_utilized=pass_utilized,
        )

        db.session.add(new_pass)
        db.session.commit()  # Commit to generate pass_id

        pass_id = new_pass.pass_id

        # List to store successfully added travellers
        travellers_added = []

        # Process each traveller
        for passport_number in traveller_passport_numbers:
            # Find user_id from passport_number
            user_sensitive = UserSensitiveInformation.query.filter_by(passport_number=passport_number).first()
            if not user_sensitive:
                return {"error": f"Traveller with passport number {passport_number} not found"}, 404

            traveller_user_id = user_sensitive.user_id

            # Add traveller to PassTraveller table
            pass_traveller = PassTraveller(pass_id=pass_id, user_id=traveller_user_id)
            db.session.add(pass_traveller)

            # Append to response list
            travellers_added.append({
                "user_id": traveller_user_id,
                "first_name": user_sensitive.first_name,
                "middle_name": user_sensitive.middle_name,
                "last_name": user_sensitive.last_name,
                "passport_number": passport_number
            })

        db.session.commit()  # Commit all travellers

        response = {
            "pass_id": pass_id,
            "creator_user_id": creator_user_id,
            "pass_date": pass_date.strftime("%Y-%m-%d %H:%M:%S"),
            "expiry_datetime": expiry_datetime.strftime("%Y-%m-%d %H:%M:%S"),
            "pass_utilized": pass_utilized,
            "travellers_added": travellers_added
        }

        # Return response
        return api.marshal(response, pass_response_model_2), 200

@ns_pass.route('/<int:user_id>/passes-history')
class UserPassHistoryResource(Resource):
    """Get all utilized passes by a user (Essentially, a history of passes utilized)."""

    @api.response(200, 'Success', pass_history_model)  # Document the 200 response with the expected model
    @api.response(404, 'Resource not found', error_response_model_404)  # Document the 404 response with error model
    def get(self, user_id):
        """Retrieve all utilized passes for a user."""

        # 1. Check if the user exists
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error": "User not found"}, 404

        # 2. Fetch all utilized passes created by the user
        utilized_passes = (
            db.session.query(
                Pass.pass_id,
                Pass.pass_date,
                Pass.expiry_datetime
            )
            .filter(Pass.creator_user_id == user_id, Pass.pass_utilized == True)
            .all()
        )

        # 3. Convert results into a list of passes
        passes_list = [
            {
                "pass_id": p.pass_id,
                "pass_date": p.pass_date,
                "expiry_datetime": p.expiry_datetime
            }
            for p in utilized_passes
        ]

        response = {
            "user_id": user_id,
            "passes_utilized": passes_list
        }

        # 4. Return response with user passes
        return api.marshal(response, pass_history_model), 200

@ns_user.route('/<int:user_id>/first-name')
class ManageUserFirstNameResource(Resource):
    """Get or update the first name of the user."""

    @api.response(200, 'First name retrieved successfully', first_name_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the first name of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        response = {"first_name": user.first_name}
        return api.marshal(response, first_name_model), 200

    @api.expect(first_name_model)
    @api.response(200, 'First name updated successfully', success_message_model)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the first name of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        user.first_name = data.get("first_name", user.first_name)
        db.session.commit()
        return {"message": "First name updated successfully"}, 200

@ns_user.route('/<int:user_id>/middle-name')
class ManageUserMiddleNameResource(Resource):
    """Get or update the middle name of the user."""

    @api.response(200, 'Middle name retrieved successfully', middle_name_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the middle name of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        
        response = {"middle_name": user.middle_name}
        return api.marshal(response, middle_name_model), 200

    @api.expect(middle_name_model)
    @api.response(200, 'Middle name updated successfully', success_message_model)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the middle name of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        user.middle_name = data.get("middle_name", user.middle_name)
        db.session.commit()
        return {"message": "Middle name updated successfully"}, 200


@ns_user.route('/<int:user_id>/last-name')
class ManageUserLastNameResource(Resource):
    """Get or update the last name of the user."""
    
    @api.response(200, 'Last name retrieved successfully', last_name_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the last name of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        response = {"last_name": user.last_name}
        return api.marshal(response, last_name_model), 200

    @api.expect(last_name_model)
    @api.response(200, 'Last name updated successfully', success_message_model)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the last name of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        user.last_name = data.get("last_name", user.last_name)
        db.session.commit()
        return {"message": "Last name updated successfully"}, 200

@ns_user.route('/<int:user_id>/dob')
class ManageUserDobResource(Resource):
    """Get or update the date of birth of the user."""

    @api.response(200, 'Date of birth retrieved successfully', dob_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the date of birth of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        response = {"date_of_birth": user.date_of_birth.strftime("%Y-%m-%d")}
        return api.marshal(response, dob_model), 200

    @api.expect(dob_model)
    @api.response(200, 'Date of birth updated successfully', success_message_model)
    @api.response(400, 'Invalid date format. Use YYYY-MM-DD', error_response_model_400)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the date of birth of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        try:
            user.date_of_birth = datetime.strptime(data.get("date_of_birth"), "%Y-%m-%d").date()
            db.session.commit()
            return {"message": "Date of Birth updated successfully"}, 200
        except ValueError:
            return {"error_code": 400, "message": "Invalid date format. Use YYYY-MM-DD"}, 400

@ns_user.route('/<int:user_id>/nationality')
class ManageUserNationalityResource(Resource):
    """Get or update the nationality (passport issuing country) of the user."""

    @api.response(200, 'Nationality retrieved successfully', nationality_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the nationality (passport issuing country) of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        response = {"nationality": user.passport_issuing_country}
        return api.marshal(response, nationality_model), 200

    @api.expect(nationality_model)
    @api.response(200, 'Nationality updated successfully', success_message_model)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the nationality (passport issuing country) of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        user.passport_issuing_country = data.get("nationality", user.passport_issuing_country)
        db.session.commit()
        return {"message": "Nationality updated successfully"}, 200

@ns_user.route('/<int:user_id>/passport-expiry')
class ManagePassportExpiryResource(Resource):
    """Get or update the passport expiry date of the user."""

    @api.response(200, 'Passport expiry retrieved successfully', passport_expiry_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the passport expiry date of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        response = {"passport_expiry": user.passport_expiry.strftime("%Y-%m-%d")}
        return api.marshal_with(response, passport_expiry_model), 200

    @api.expect(passport_expiry_model)
    @api.response(200, 'Passport expiry updated successfully', success_message_model)
    @api.response(400, 'Invalid date format. Use YYYY-MM-DD', error_response_model_400)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the passport expiry date of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        try:
            user.passport_expiry = datetime.strptime(data.get("passport_expiry"), "%Y-%m-%d")
            db.session.commit()
            return {"message": "Passport expiry date updated successfully"}, 200
        except ValueError:
            return {"error_code": 400, "message": "Invalid date format. Use YYYY-MM-DD"}, 400

@ns_user.route('/<int:user_id>/passport-number')
class ManageUserPassportNumberResource(Resource):
    """Get or update the passport number of the user."""

    @api.response(200, 'Passport number retrieved successfully', passport_number_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Retrieve the passport number of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404
        response = {"passport_number": user.passport_number}
        return api.marshal_with(response, passport_number_model), 200

    @api.expect(passport_number_model)
    @api.response(200, 'Passport number updated successfully', success_message_model)
    @api.response(400, 'Invalid passport number format', error_response_model_400)
    @api.response(404, 'User not found', error_response_model_404)
    def post(self, user_id):
        """Update the passport number of the user."""
        user = UserSensitiveInformation.query.get(user_id)
        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        data = request.get_json()
        passport_number = data.get("passport_number")
        
        if not passport_number:
            return {"error_code": 400, "message": "Passport number is required"}, 400
        
        user.passport_number = passport_number
        db.session.commit()
        
        return {"message": "Passport number updated successfully"}, 200

@ns_user.route('/<int:user_id>/profile')
class UserProfileResource(Resource):
    """Retrieve the profile of the user."""

    @api.response(200, 'User profile retrieved successfully', user_profile_model)
    @api.response(404, 'User not found', error_response_model_404)
    def get(self, user_id):
        """Get all the information of the user."""
        user = UserSensitiveInformation.query.get(user_id)

        if not user:
            return {"error_code": 404, "message": "User not found"}, 404

        # Prepare the profile data, ensuring that None is safely returned for optional fields.
        profile_data = {
            "first_name": user.first_name if user.first_name else None,
            "middle_name": user.middle_name if user.middle_name else None,
            "last_name": user.last_name if user.last_name else None,
            "date_of_birth": user.date_of_birth.strftime("%Y-%m-%d") if user.date_of_birth else None,
            "nationality": user.passport_issuing_country if user.passport_issuing_country else None,
            "passport_expiry": user.passport_expiry.strftime("%Y-%m-%d") if user.passport_expiry else None,
            "passport_number": user.passport_number if user.passport_number else None
        }

        return api.marshal(profile_data, user_profile_model), 200

@ns_user.route('/<int:user_id>/get-travellers')
class UserTravellersResource(Resource):
    """Get all travellers (that are not associated with pass/preset) for a user."""

    @api.response(200, 'Travellers retrieved successfully', user_travellers_model)
    @api.response(404, 'User not found', error_response_model_404)
    @api.response(400, 'Bad request due to incorrect data', error_response_model_400)
    def get(self, user_id):
        """Retrieve all travellers added by the user that are not associated with a pass or preset."""
        
        # Check if the creator user exists
        creator = UserSensitiveInformation.query.get(user_id)
        if not creator:
            return {"error_code": 404, "message": "User not found"}, 404

        # Query all travellers added by the creator
        travellers = (
            db.session.query(
                UserSensitiveInformation.user_id,
                UserSensitiveInformation.first_name,
                UserSensitiveInformation.middle_name,
                UserSensitiveInformation.last_name,
                UserSensitiveInformation.passport_number
            )
            .join(UserTraveller, UserSensitiveInformation.user_id == UserTraveller.traveller_id)
            .filter(UserTraveller.creator_user_id == user_id)
            .all()
        )

        # Convert traveller data to list of dicts 
        traveller_list = [
            {
                "user_id": t.user_id,
                "first_name": t.first_name,
                "middle_name": t.middle_name,
                "last_name": t.last_name,
                "passport_number": t.passport_number
            }
            for t in travellers
        ]
        
        # Marshal and return the response with status 200
        response = {
            "creator_user_id": user_id,
            "travellers": traveller_list
        }
        return api.marshal_with(response, user_travellers_model), 200

@ns_user.route('/<int:user_id>/add-traveller')
class AddTravellerResource(Resource):
    """Add a traveller (not associated with pass/preset) for a user."""

    @api.expect(passport_number_model)
    @api.response(201, 'Traveller added successfully', user_travellers_model)
    @api.response(400, 'Required fields missing or data already in database', error_response_model_400)
    @api.response(404, 'Resource not found', error_response_model_404)
    def post(self, user_id):    
        """Add a traveller for the user."""

        # Check if the creator user exists
        creator = UserSensitiveInformation.query.get(user_id)
        if not creator:
            return {"error_code": 404, "message": "Creator user not found"}, 404

        # Get JSON data
        data = request.get_json()
        passport_number = data.get("passport_number")

        if not passport_number:
            return {"error_code": 400, "message": "Passport number is required"}, 400

        # Find the traveller by passport number
        traveller = UserSensitiveInformation.query.filter_by(passport_number=passport_number).first()
        
        if not traveller:
            return {"error_code": 404, "message": "Traveller with this passport number not found"}, 404

        traveller_id = traveller.user_id

        # Check if traveller is already added by this user
        existing_entry = UserTraveller.query.filter_by(creator_user_id=user_id, traveller_id=traveller_id).first()
        if existing_entry:
            return {"error_code": 400, "message": "Traveller already added"}, 400

        # Add to UserTraveller table
        new_traveller = UserTraveller(creator_user_id=user_id, traveller_id=traveller_id)
        db.session.add(new_traveller)
        db.session.commit()

        # Create a response that matches the expected model
        response = {
            "creator_user_id": user_id,
            "travellers": {
                "user_id": traveller.user_id,
                "first_name": traveller.first_name,
                "middle_name": traveller.middle_name,
                "last_name": traveller.last_name,
                "passport_number": traveller.passport_number
            }
        }

        return api.marshal_with(response, user_travellers_model), 201


if __name__ == '__main__':

    with app.app_context():

        # Drop all tables to start fresh
        db.drop_all()

        # Create database tables
        db.create_all() 

        # Insert mock data
        insert_mock_data()  

    app.run(debug=True, host='0.0.0.0', port=5000)
